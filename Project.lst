Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/03/21 15:24:47
)Program Template     (Proj6_fonbergi.asm		     Page 1 - 1


				TITLE Program Template     (Proj6_fonbergi.asm)

				; Author: Ian Fonberg
				; Last Modified: 5/31/2021
				; OSU email address: fonbergi@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: 6/6/2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				; 
				; Display prompt and get the user's input into a memory location.
				;
				; Preconditions: Do not use EAX, ECX, or EDX as arguments
				;
				; Postconditions: none
				;
				; Receives:
				;   getPrompt   = input, offset of prompt to display
				;   getLength   = input, value of maximum length of user input string
				;   getDest     = output, offset of user input string
				;   getBytes    = output, offset of number of bytes read
				;
				; Returns:
				;   getDest     = raw user input
				;   getBytes    = bytes written
				; ---------------------------------------------------------------------------------
				mGetString MACRO getPrompt:REQ, getLength:REQ, getDest:REQ, getBytes:REQ
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    PUSH    EDI

				; Display Prompt.
				    MOV     EDX, getPrompt
				    CALL    WriteString
				    
				; Store Raw Input
				    MOV     ECX, getLength      ; Max limit of readable characters.
				    MOV     EDX, getDest

				    CALL    ReadString

				    MOV     EDI, getBytes
				    MOV     [EDI], EAX       ; Store bytes read.

				    POP     EDI
				    POP     EDX
				    POP     ECX
				    POP     EAX
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				; 
				; Print the string which is stored in a specified memory location.
				;
				; Preconditions: Do not use EDX as an argument.
				;
				; Postconditions: none
				;
				; Receives:
				;   displayStr  = input, offset of string to display
				;
				; Returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO displayStr:REQ
				    PUSH    EDX

				; Display stored string.
				    MOV     EDX, displayStr
				    CALL    WriteString

				    POP     EDX
				ENDM


 = 0000000C			MAX_INPUT = 12

 00000000			.data

 00000000 50 6C 65 61 73	firstAttempt    BYTE    "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000001F 50 6C 65 61 73	secondAttempt   BYTE    "Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000032 45 52 52 4F 52	emptyMsg        BYTE    "ERROR: a value is required.",13,10,0
	   3A 20 61 20 76
	   61 6C 75 65 20
	   69 73 20 72 65
	   71 75 69 72 65
	   64 2E 0D 0A 00
 00000050 45 52 52 4F 52	errorMsg        BYTE    "ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 00000097  0000000C [		rawNumString    BYTE    MAX_INPUT DUP(0)
	    00
	   ]
 000000A3 00000000		bytesRead       DWORD   ?
 000000A7 00000000		validNum        SDWORD  ?

 00000000			.code
 00000000			main PROC

 00000000  68 00000000 R	    PUSH    OFFSET firstAttempt
 00000005  68 00000032 R	    PUSH    OFFSET emptyMsg
 0000000A  68 00000050 R	    PUSH    OFFSET errorMsg
 0000000F  68 0000001F R	    PUSH    OFFSET secondAttempt
 00000014  68 00000097 R	    PUSH    OFFSET rawNumString
 00000019  68 000000A3 R	    PUSH    OFFSET bytesRead
 0000001E  68 000000A7 R	    PUSH    OFFSET validNum
 00000023  E8 00000061		    CALL    ReadVal

 00000028  A1 000000A7 R	    MOV     EAX, validNum
 0000002D  E8 00000000 E	    CALL    WriteInt
 00000032  E8 00000000 E	    CALL    CrLf
 00000037  A1 000000A3 R	    MOV     EAX, bytesRead
 0000003C  E8 00000000 E	    CALL    WriteDec

 00000041  68 00000000 R	    PUSH    OFFSET firstAttempt
 00000046  68 00000032 R	    PUSH    OFFSET emptyMsg
 0000004B  68 00000050 R	    PUSH    OFFSET errorMsg
 00000050  68 0000001F R	    PUSH    OFFSET secondAttempt
 00000055  68 00000097 R	    PUSH    OFFSET rawNumString
 0000005A  68 000000A3 R	    PUSH    OFFSET bytesRead
 0000005F  68 000000A7 R	    PUSH    OFFSET validNum
 00000064  E8 00000020		    CALL    ReadVal

 00000069  A1 000000A7 R	    MOV     EAX, validNum
 0000006E  E8 00000000 E	    CALL    WriteInt
 00000073  E8 00000000 E	    CALL    CrLf
 00000078  A1 000000A3 R	    MOV     EAX, bytesRead
 0000007D  E8 00000000 E	    CALL    WriteDec

				    Invoke ExitProcess,0	; exit to operating system
 00000082  6A 00	   *	    push   +000000000h
 00000084  E8 00000000 E   *	    call   ExitProcess
 00000089			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Gets user input in the form of a string of digits, then attempts to convert the
				;   string of ASCII digits to its numeric value representation. If the input is
				;   invalid, the user is prompted to try again with an appropriate value, otherwise
				;   the value is stored in memory.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;   [EBP+32]    = input, offset of first attempt prompt
				;   [EBP+28]    = input, offset of empty error message
				;   [EBP+24]    = input, offset of invalid error message
				;   [EBP+20]    = input, offset of second attempt prompt
				;   [EBP+16]    = output, offset of user input string
				;   [EBP+12]    = output, offset of number of bytes read
				;   [EBP+8]     = output, offset of number storage
				;
				; Returns: [EBP+8] = validated number
				; ---------------------------------------------------------------------------------
 00000089			ReadVal PROC USES EAX EBX ECX EDX ESI
				    LOCAL valid:BYTE, numInt:DWORD, sign:SDWORD

				; -------------------------
				; Get Integer Digits.
				; -------------------------
 00000089  55		   *	    push   ebp
 0000008A  8B EC	   *	    mov    ebp, esp
 0000008C  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 0000008F  50		   *	    push   eax
 00000090  53		   *	    push   ebx
 00000091  51		   *	    push   ecx
 00000092  52		   *	    push   edx
 00000093  56		   *	    push   esi
 00000094  C6 45 FF 01		    MOV     valid, 1                                    ; Initialize valid to true.
				; Display initial prompt for signed number.
				    mGetString [EBP+32], MAX_INPUT, [EBP+16], [EBP+12]
 00000098  50		     1	    PUSH    EAX
 00000099  51		     1	    PUSH    ECX
 0000009A  52		     1	    PUSH    EDX
 0000009B  57		     1	    PUSH    EDI
 0000009C  8B 55 20	     1	    MOV     EDX, [EBP+32]
 0000009F  E8 00000000 E     1	    CALL    WriteString
 000000A4  B9 0000000C	     1	    MOV     ECX, MAX_INPUT      ; Max limit of readable characters.
 000000A9  8B 55 10	     1	    MOV     EDX, [EBP+16]
 000000AC  E8 00000000 E     1	    CALL    ReadString
 000000B1  8B 7D 0C	     1	    MOV     EDI, [EBP+12]
 000000B4  89 07	     1	    MOV     [EDI], EAX       ; Store bytes read.
 000000B6  5F		     1	    POP     EDI
 000000B7  5A		     1	    POP     EDX
 000000B8  59		     1	    POP     ECX
 000000B9  58		     1	    POP     EAX

 000000BA			_validateDigits:
 000000BA  C7 45 F8		    MOV     numInt, 0                                   ; Initialize integer aggregator to 0.
	   00000000
 000000C1  C7 45 F4		    MOV     sign, 1                                     ; Value is unsigned.
	   00000001

 000000C8  80 7D FF 00		    CMP     valid, 0
 000000CC  75 22		    JNE     _endTryAgain

				; Prompt for new signed integer.
				    mGetString [EBP+20], MAX_INPUT, [EBP+16], [EBP+12]
 000000CE  50		     1	    PUSH    EAX
 000000CF  51		     1	    PUSH    ECX
 000000D0  52		     1	    PUSH    EDX
 000000D1  57		     1	    PUSH    EDI
 000000D2  8B 55 14	     1	    MOV     EDX, [EBP+20]
 000000D5  E8 00000000 E     1	    CALL    WriteString
 000000DA  B9 0000000C	     1	    MOV     ECX, MAX_INPUT      ; Max limit of readable characters.
 000000DF  8B 55 10	     1	    MOV     EDX, [EBP+16]
 000000E2  E8 00000000 E     1	    CALL    ReadString
 000000E7  8B 7D 0C	     1	    MOV     EDI, [EBP+12]
 000000EA  89 07	     1	    MOV     [EDI], EAX       ; Store bytes read.
 000000EC  5F		     1	    POP     EDI
 000000ED  5A		     1	    POP     EDX
 000000EE  59		     1	    POP     ECX
 000000EF  58		     1	    POP     EAX

 000000F0			_endTryAgain:
 000000F0  8B 0D 000000A3 R	    MOV     ECX, bytesRead                              ; Initialize counter.
 000000F6  41			    INC     ECX

				; -------------------------
				; Assert input is non-empty.
				; -------------------------
				; Assert a value was read.
 000000F7  83 3D 000000A3 R	    CMP     bytesRead, 0
	   00
 000000FE  75 0E		    JNE     _notEmpty

				; Set error state.
 00000100  C6 45 FF 00		    MOV     valid, 0                                    ; Valid is false.
 00000104  8B 55 1C		    MOV     EDX, [EBP+28]
 00000107  E8 00000000 E	    CALL    WriteString
 0000010C  EB AC		    JMP     _validateDigits
 0000010E			_notEmpty:
 0000010E  8B 75 10		    MOV     ESI, [EBP+16]                               ; Move user input to ESI.
				 
				; -------------------------
				; Assert sign is either first character or absent.
				; -------------------------
 00000111  FC			    CLD
 00000112  AC			    LODSB
 00000113  49			    DEC     ECX                                         ; Load first character and adjust counter position.

 00000114  3C 2D		    CMP     AL, 45                                      ; is the character a '-' sign?
 00000116  74 06		    JE      _setNegative
 00000118  3C 2B		    CMP     AL, 43                                      ; is the character a '+' sign?
 0000011A  74 09		    JE      _checkLength
 0000011C  EB 23		    JMP     _aggregateNum                               ; Proceed with calculation.

 0000011E			_setNegative:
 0000011E  C7 45 F4		    MOV     sign, -1
	   FFFFFFFF
 00000125			_checkLength:
 00000125  83 3D 000000A3 R	    CMP     bytesRead, 1                                ; Assert sign is not the only component.
	   01
 0000012C  75 11		    JNE     _loadNext
				; Set error state.
 0000012E  C6 45 FF 00		    MOV     valid, 0                                    ; Valid is false.
 00000132  8B 55 18		    MOV     EDX, [EBP+24]
 00000135  E8 00000000 E	    CALL    WriteString
 0000013A  E9 FFFFFF7B		    JMP     _validateDigits

 0000013F			_loadNext:
 0000013F  AC			    LODSB
 00000140  49			    DEC     ECX                                         ; Load second character and adjust counter position.
 00000141			_aggregateNum:
				   
				    ; -------------------------
				    ; Aggregate digits into integer.
				    ; -------------------------
 00000141			    _readDigit:
 00000141  3C 30		        CMP     AL, 48
 00000143  72 21		        JB      _notDigitOrTooLarge
 00000145  3C 39		        CMP      AL, 57
 00000147  77 1D		        JA      _notDigitOrTooLarge
				        
				    ; ASCII value - 48 will result in an integer between 0 and 9, inclusive.
 00000149  0F B6 D8		        MOVZX   EBX, AL
 0000014C  83 EB 30		        SUB     EBX, 48
 0000014F  0F AF 5D F4		        IMUL    EBX, sign

				    ; Multiply 10x current numInt.
 00000153  B8 0000000A		        MOV     EAX, 10
 00000158  F7 6D F8		        IMUL    numInt
 0000015B  70 09		        JO      _notDigitOrTooLarge                     ; Invalid if overflow.

				    ; Add both combinInteger value.
 0000015D  03 C3		        ADD     EAX, EBX
 0000015F  70 05		        JO      _notDigitOrTooLarge                     ; Invalid if overflow.

 00000161  89 45 F8		        MOV     numInt, EAX

 00000164  EB 11		        JMP     _continueRead
 00000166			    _notDigitOrTooLarge:
 00000166  C6 45 FF 00		        MOV     valid, 0                                ; Valid is false.
 0000016A  8B 55 18		        MOV     EDX, [EBP+24]
 0000016D  E8 00000000 E	        CALL    WriteString
 00000172  E9 FFFFFF43		        JMP     _validateDigits
 00000177			    _continueRead:
 00000177  AC			        LODSB
 00000178  E2 C7		        LOOP    _readDigit

				; -------------------------
				; Store number.
				; -------------------------
 0000017A  8B 7D 08		    MOV     EDI, [EBP+8]
 0000017D  8B 45 F8		    MOV     EAX, numInt
 00000180  89 07		    MOV     [EDI], EAX

 00000182  5E		   *	    pop    esi
 00000183  5A		   *	    pop    edx
 00000184  59		   *	    pop    ecx
 00000185  5B		   *	    pop    ebx
 00000186  58		   *	    pop    eax
 00000187  C9		   *	    leave  
 00000188  C2 0018		    RET 24
 0000018B			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Convert a numeric SDWORD value to a string of ASCII digits and displays it to
				;   the user.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;   [EBP+8]     = input, numeric SDWORD value
				;
				; Returns: none
				; ---------------------------------------------------------------------------------
 0000018B			WriteVal PROC
 0000018B  C3			    RET
 0000018C			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/03/21 15:24:47
)Program Template     (Proj6_fonbergi.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000AB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000018C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000089 _TEXT	Length= 00000102 Public STDCALL
  valid  . . . . . . . . . . . .	Byte	 bp - 00000001
  numInt . . . . . . . . . . . .	DWord	 bp - 00000008
  sign . . . . . . . . . . . . .	DWord	 bp - 0000000C
  _validateDigits  . . . . . . .	L Near	 000000BA _TEXT	
  _endTryAgain . . . . . . . . .	L Near	 000000F0 _TEXT	
  _notEmpty  . . . . . . . . . .	L Near	 0000010E _TEXT	
  _setNegative . . . . . . . . .	L Near	 0000011E _TEXT	
  _checkLength . . . . . . . . .	L Near	 00000125 _TEXT	
  _loadNext  . . . . . . . . . .	L Near	 0000013F _TEXT	
  _aggregateNum  . . . . . . . .	L Near	 00000141 _TEXT	
  _readDigit . . . . . . . . . .	L Near	 00000141 _TEXT	
  _notDigitOrTooLarge  . . . . .	L Near	 00000166 _TEXT	
  _continueRead  . . . . . . . .	L Near	 00000177 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000018B _TEXT	Length= 00000001 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000089 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT  . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000000A3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
emptyMsg . . . . . . . . . . . .	Byte	 00000032 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000050 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
firstAttempt . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
rawNumString . . . . . . . . . .	Byte	 00000097 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
secondAttempt  . . . . . . . . .	Byte	 0000001F _DATA	
validNum . . . . . . . . . . . .	DWord	 000000A7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
