Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/04/21 11:20:52
)Program Template     (Proj6_fonbergi.asm		     Page 1 - 1


				TITLE Program Template     (Proj6_fonbergi.asm)

				; Author: Ian Fonberg
				; Last Modified: 6/4/2021
				; OSU email address: fonbergi@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: 6/6/2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				; 
				; Display prompt and get the user's input into a memory location.
				;
				; Preconditions: Do not use EAX, ECX, or EDX as arguments
				;
				; Postconditions: none
				;
				; Receives:
				;   getPrompt   = input, offset of prompt to display
				;   getLength   = input, value of maximum length of user input string
				;   getDest     = output, offset of user input string
				;   getBytes    = output, offset of number of bytes read
				;
				; Returns:
				;   getDest     = raw user input
				;   getBytes    = bytes written
				; ---------------------------------------------------------------------------------
				mGetString MACRO getPrompt:REQ, getLength:REQ, getDest:REQ, getBytes:REQ
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    PUSH    EDI

				; Display Prompt.
				    MOV     EDX, getPrompt
				    CALL    WriteString
				    
				; Store Raw Input
				    MOV     ECX, getLength      ; Max limit of readable characters.
				    MOV     EDX, getDest

				    CALL    ReadString

				    MOV     EDI, getBytes
				    MOV     [EDI], EAX       ; Store bytes read.

				    POP     EDI
				    POP     EDX
				    POP     ECX
				    POP     EAX
				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				; 
				; Print the string which is stored in a specified memory location.
				;
				; Preconditions: Do not use EDX as an argument.
				;
				; Postconditions: none
				;
				; Receives:
				;   displayStr  = input, offset of string to display
				;
				; Returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO displayStr:REQ
				    PUSH    EDX

				; Display stored string.
				    MOV     EDX, displayStr
				    CALL    WriteString

				    POP     EDX
				ENDM


 = 0000000C			MAX_DIGITS = 12
 = 0000000A			ARRAY_SIZE = 10

 00000000			.data

 00000000 20 50 6C 65 61	firstAttempt    BYTE    " Please enter a signed number: ",0
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000020 20 50 6C 65 61	secondAttempt   BYTE    " Please try again: ",0
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 3A 20 00
 00000034 45 52 52 4F 52	emptyMsg        BYTE    "ERROR: a value is required.",13,10,0
	   3A 20 61 20 76
	   61 6C 75 65 20
	   69 73 20 72 65
	   71 75 69 72 65
	   64 2E 0D 0A 00
 00000052 45 52 52 4F 52	errorMsg        BYTE    "ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 00000099  0000000C [		rawNumString    BYTE    MAX_DIGITS DUP(0)
	    00
	   ]
 000000A5 00000000		bytesRead       DWORD   ?
 000000A9 00000000		validNum        SDWORD  ?
 000000AD 50 52 4F 47 52	intro1          BYTE    "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 49
	   61 6E 20 46 6F
	   6E 62 65 72 67
	   0D 0A 2A 2A 45
	   43 3A 20 4E 75
	   6D 62 65 72 20
	   65 61 63 68 20
	   6C 69 6E 65 20
	   6F 66 20 75 73
	   65 72 20 69 6E
	   70 75 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 61 20 72 75
	   6E 6E 69 6E 67
	   20 73 75 62 74
	   6F 74 61 6C 20
	   6F 66 20 74 68
	   65 20 75 73 65
	   72 27 73 20 76
	   61 6C 69 64 20
	   6E 75 6D 62 65
	   72 73 0D 0A 0D
	   0A 50 6C 65 61
	   73 65 20 70 72
	   6F 76 69 64 65
	   20 00
				                        "Written by: Ian Fonberg",13,10,
				                        "**EC: Number each line of user input and display a running subtotal of the user's valid numbers",13,10,13,10,
				                        "Please provide ",0
 00000177 20 73 69 67 6E	intro2          BYTE    " signed decimal integers.",13,10,
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A 45 61 63
	   68 20 6E 75 6D
	   62 65 72 20 6E
	   65 65 64 73 20
	   74 6F 20 62 65
	   20 73 6D 61 6C
	   6C 20 65 6E 6F
	   75 67 68 20 74
	   6F 20 66 69 74
	   20 69 6E 73 69
	   64 65 20 61 20
	   33 32 20 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 20 41 66 74
	   65 72 20 79 6F
	   75 20 68 61 76
	   65 20 66 69 6E
	   69 73 68 65 64
	   20 69 6E 70 75
	   74 74 69 6E 67
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0D 0A 0D 0A
	   00
				                        "Each number needs to be small enough to fit inside a 32 bit register. After you have ",
				                        "finished inputting the raw numbers I will display a list of the integers, their sum, ",
				                        "and their average value.",13,10,13,10,0
 00000259  0000000A [		testArr         SDWORD  ARRAY_SIZE DUP(?)
	    00000000
	   ]
 00000281 59 6F 75 20 65	numsEntered     BYTE    "You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 000002A7 2C 20 00		comma           BYTE    ", ",0
 000002AA 54 68 65 20 73	sumNums         BYTE    "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000002C8 54 68 65 20 72	avgNums         BYTE    "The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 000002E1 54 68 61 6E 6B	goodbye         BYTE    "Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 000002F5 01			lineNo          BYTE    1

 00000000			.code
 00000000			main PROC

				; -------------------------
				; Test Script
				; -------------------------
				; Introduce test script.
 00000000  BA 000000AD R	    MOV     EDX, OFFSET intro1
 00000005  E8 00000000 E	    CALL    WriteString

 0000000A  6A 0A		    PUSH    ARRAY_SIZE
 0000000C  E8 000001FE		    CALL    WriteVal

 00000011  BA 00000177 R	    MOV     EDX, OFFSET intro2
 00000016  E8 00000000 E	    CALL    WriteString

				; -------------------------
				; Add user input to array.
				; -------------------------
 0000001B  B9 0000000A		    MOV     ECX, ARRAY_SIZE                 ; Initialize counter to 
 00000020  BF 00000259 R	    MOV     EDI, OFFSET testArr
 00000025			_readLoop:
 00000025  68 000002F5 R	    PUSH    OFFSET lineNo
 0000002A  68 00000000 R	    PUSH    OFFSET firstAttempt
 0000002F  68 00000034 R	    PUSH    OFFSET emptyMsg
 00000034  68 00000052 R	    PUSH    OFFSET errorMsg
 00000039  68 00000020 R	    PUSH    OFFSET secondAttempt
 0000003E  68 00000099 R	    PUSH    OFFSET rawNumString
 00000043  68 000000A5 R	    PUSH    OFFSET bytesRead
 00000048  68 000000A9 R	    PUSH    OFFSET validNum
 0000004D  E8 000000A0		    CALL    ReadVal

				; Insert signed integer using register indirect addressing.
 00000052  8B 1D 000000A9 R	    MOV     EBX, validNum
 00000058  89 1F		    MOV     [EDI], EBX
 0000005A  83 C7 04		    ADD     EDI, TYPE testArr

 0000005D  E2 C6		    LOOP    _readLoop
 0000005F  E8 00000000 E	    CALL    CrLf

				; -------------------------
				; Display numbers entered and calculate sum.
				; -------------------------
 00000064  BA 00000281 R	    MOV     EDX, OFFSET numsEntered
 00000069  E8 00000000 E	    CALL    WriteString

 0000006E  BE 00000259 R	    MOV     ESI, OFFSET testArr
 00000073  B9 0000000A		    MOV     ECX, ARRAY_SIZE
 00000078  B8 00000000		    MOV     EAX, 0                                      ; Initialize sum
				    
 0000007D  FF 36		    PUSH    [ESI]
 0000007F  E8 0000018B		    CALL    WriteVal                                    ; Display first number

 00000084  03 06		    ADD     EAX, [ESI]                                  ; Add first number to sum
 00000086  49			    DEC     ECX                                         ; Decrement counter.

 00000087			_writeLoop:
				; Comma separate the numbers
 00000087  BA 000002A7 R	    MOV     EDX, OFFSET comma
 0000008C  E8 00000000 E	    CALL    WriteString

 00000091  83 C6 04		    ADD     ESI, TYPE testArr                           ; Access next number using register indirect addressing.

 00000094  FF 36		    PUSH    [ESI]
 00000096  E8 00000174		    CALL    WriteVal                                    ; Display the current number.

 0000009B  03 06		    ADD     EAX, [ESI]                                  ; Add current number to sum.
				    
 0000009D  E2 E8		    LOOP    _writeLoop
 0000009F  E8 00000000 E	    CALL    CrLf

				; -------------------------
				; Display sum of numbers entered.
				; -------------------------
 000000A4  BA 000002AA R	    MOV     EDX, OFFSET sumNums
 000000A9  E8 00000000 E	    CALL    WriteString

 000000AE  50			    PUSH    EAX                                         ; EAX holds final sum.
 000000AF  E8 0000015B		    CALL    WriteVal
 000000B4  E8 00000000 E	    CALL    CrLf

				; -------------------------
				; Calculate and display average of numbers entered.
				; -------------------------
 000000B9  BB 0000000A		    MOV     EBX, ARRAY_SIZE
 000000BE  99			    CDQ
 000000BF  F7 FB		    IDIV    EBX

				; Floor negative numbers with remainders.
 000000C1  83 FA 00		    CMP     EDX, 0
 000000C4  7D 01		    JGE     _alreadyFloored
 000000C6  48			    DEC     EAX

 000000C7			_alreadyFloored:
 000000C7  BA 000002C8 R	    MOV     EDX, OFFSET avgNums
 000000CC  E8 00000000 E	    CALL    WriteString
				    
 000000D1  50			    PUSH     EAX                                        ; EAX contains floored average.
 000000D2  E8 00000138		    CALL    WriteVal

 000000D7  E8 00000000 E	    CALL    CrLf
 000000DC  E8 00000000 E	    CALL    CrLf

				; Say goodbye to user.
 000000E1  BA 000002E1 R	    MOV     EDX, OFFSET goodbye
 000000E6  E8 00000000 E	    CALL    WriteString

				    Invoke ExitProcess,0	; exit to operating system
 000000EB  6A 00	   *	    push   +000000000h
 000000ED  E8 00000000 E   *	    call   ExitProcess
 000000F2			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Gets user input in the form of a string of digits, then attempts to convert the
				;   string of ASCII digits to its numeric value representation. If the input is
				;   invalid, the user is prompted to try again with an appropriate value, otherwise
				;   the value is stored in memory.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;   [EBP+36]    = input/output, offset of current number of valid guesses.
				;   [EBP+32]    = input, offset of first attempt prompt
				;   [EBP+28]    = input, offset of empty error message
				;   [EBP+24]    = input, offset of invalid error message
				;   [EBP+20]    = input, offset of second attempt prompt
				;   [EBP+16]    = output, offset of user input string
				;   [EBP+12]    = output, offset of number of bytes read
				;   [EBP+8]     = output, offset of number storage
				;
				; Returns: [EBP+8] = validated number
				; ---------------------------------------------------------------------------------
 000000F2			ReadVal PROC USES EAX EBX ECX EDX EDI ESI
				    LOCAL valid:BYTE, numInt:SDWORD, sign:SDWORD

				; -------------------------
				; Get Integer Digits.
				; -------------------------
 000000F2  55		   *	    push   ebp
 000000F3  8B EC	   *	    mov    ebp, esp
 000000F5  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000F8  50		   *	    push   eax
 000000F9  53		   *	    push   ebx
 000000FA  51		   *	    push   ecx
 000000FB  52		   *	    push   edx
 000000FC  57		   *	    push   edi
 000000FD  56		   *	    push   esi
 000000FE  C6 45 FF 01		    MOV     valid, 1                                    ; Initialize valid to true.

				; Display initial prompt for signed number.
 00000102  8B 5D 24		    MOV     EBX, [EBP+36]
 00000105  FF 33		    PUSH    [EBX]
 00000107  E8 00000103		    CALL    WriteVal                                    ; Display line number.
				    mGetString [EBP+32], MAX_DIGITS, [EBP+16], [EBP+12]
 0000010C  50		     1	    PUSH    EAX
 0000010D  51		     1	    PUSH    ECX
 0000010E  52		     1	    PUSH    EDX
 0000010F  57		     1	    PUSH    EDI
 00000110  8B 55 20	     1	    MOV     EDX, [EBP+32]
 00000113  E8 00000000 E     1	    CALL    WriteString
 00000118  B9 0000000C	     1	    MOV     ECX, MAX_DIGITS      ; Max limit of readable characters.
 0000011D  8B 55 10	     1	    MOV     EDX, [EBP+16]
 00000120  E8 00000000 E     1	    CALL    ReadString
 00000125  8B 7D 0C	     1	    MOV     EDI, [EBP+12]
 00000128  89 07	     1	    MOV     [EDI], EAX       ; Store bytes read.
 0000012A  5F		     1	    POP     EDI
 0000012B  5A		     1	    POP     EDX
 0000012C  59		     1	    POP     ECX
 0000012D  58		     1	    POP     EAX

 0000012E			_validateDigits:
 0000012E  C7 45 F8		    MOV     numInt, 0                                   ; Initialize integer aggregator to 0.
	   00000000
 00000135  C7 45 F4		    MOV     sign, 1                                     ; Value is unsigned.
	   00000001

 0000013C  80 7D FF 00		    CMP     valid, 0
 00000140  75 2C		    JNE     _endTryAgain

				; Prompt for new signed integer.
 00000142  8B 5D 24		    MOV     EBX, [EBP+36]
 00000145  FF 33		    PUSH    [EBX]
 00000147  E8 000000C3		    CALL    WriteVal                                    ; Display line number.
				    mGetString [EBP+20], MAX_DIGITS, [EBP+16], [EBP+12]
 0000014C  50		     1	    PUSH    EAX
 0000014D  51		     1	    PUSH    ECX
 0000014E  52		     1	    PUSH    EDX
 0000014F  57		     1	    PUSH    EDI
 00000150  8B 55 14	     1	    MOV     EDX, [EBP+20]
 00000153  E8 00000000 E     1	    CALL    WriteString
 00000158  B9 0000000C	     1	    MOV     ECX, MAX_DIGITS      ; Max limit of readable characters.
 0000015D  8B 55 10	     1	    MOV     EDX, [EBP+16]
 00000160  E8 00000000 E     1	    CALL    ReadString
 00000165  8B 7D 0C	     1	    MOV     EDI, [EBP+12]
 00000168  89 07	     1	    MOV     [EDI], EAX       ; Store bytes read.
 0000016A  5F		     1	    POP     EDI
 0000016B  5A		     1	    POP     EDX
 0000016C  59		     1	    POP     ECX
 0000016D  58		     1	    POP     EAX

 0000016E			_endTryAgain:
 0000016E  8B 0D 000000A5 R	    MOV     ECX, bytesRead                              ; Initialize counter.
 00000174  41			    INC     ECX

				; -------------------------
				; Assert input is non-empty.
				; -------------------------
				; Assert a value was read.
 00000175  83 3D 000000A5 R	    CMP     bytesRead, 0
	   00
 0000017C  75 0E		    JNE     _notEmpty

				; Set error state.
 0000017E  C6 45 FF 00		    MOV     valid, 0                                    ; Valid is false.
 00000182  8B 55 1C		    MOV     EDX, [EBP+28]
 00000185  E8 00000000 E	    CALL    WriteString
 0000018A  EB A2		    JMP     _validateDigits
 0000018C			_notEmpty:
 0000018C  8B 75 10		    MOV     ESI, [EBP+16]                               ; Move user input to ESI.
				 
				; -------------------------
				; Assert sign is either first character or absent.
				; -------------------------
 0000018F  FC			    CLD
 00000190  AC			    LODSB
 00000191  49			    DEC     ECX                                         ; Load first character and adjust counter position.

 00000192  3C 2D		    CMP     AL, 45                                      ; is the character a '-' sign?
 00000194  74 06		    JE      _setNegative
 00000196  3C 2B		    CMP     AL, 43                                      ; is the character a '+' sign?
 00000198  74 09		    JE      _checkLength
 0000019A  EB 23		    JMP     _aggregateNum                               ; Proceed with calculation.

 0000019C			_setNegative:
 0000019C  C7 45 F4		    MOV     sign, -1
	   FFFFFFFF
 000001A3			_checkLength:
 000001A3  83 3D 000000A5 R	    CMP     bytesRead, 1                                ; Assert sign is not the only component.
	   01
 000001AA  75 11		    JNE     _loadNext
				; Set error state.
 000001AC  C6 45 FF 00		    MOV     valid, 0                                    ; Valid is false.
 000001B0  8B 55 18		    MOV     EDX, [EBP+24]
 000001B3  E8 00000000 E	    CALL    WriteString
 000001B8  E9 FFFFFF71		    JMP     _validateDigits

 000001BD			_loadNext:
 000001BD  AC			    LODSB
 000001BE  49			    DEC     ECX                                         ; Load second character and adjust counter position.
 000001BF			_aggregateNum:
				   
				    ; -------------------------
				    ; Aggregate digits into integer.
				    ; -------------------------
 000001BF			    _readDigit:
 000001BF  3C 30		        CMP     AL, 48
 000001C1  72 21		        JB      _notDigitOrTooLarge
 000001C3  3C 39		        CMP      AL, 57
 000001C5  77 1D		        JA      _notDigitOrTooLarge
				        
				    ; ASCII value - 48 will result in an integer between 0 and 9, inclusive.
 000001C7  0F B6 D8		        MOVZX   EBX, AL
 000001CA  83 EB 30		        SUB     EBX, 48
 000001CD  0F AF 5D F4		        IMUL    EBX, sign                               ; Calculated signed amount to add to total.

				    ; Multiply 10x current numInt.
 000001D1  B8 0000000A		        MOV     EAX, 10
 000001D6  F7 6D F8		        IMUL    numInt
 000001D9  70 09		        JO      _notDigitOrTooLarge                     ; Invalid if overflow.

				    ; Add both to get current integer value.
 000001DB  03 C3		        ADD     EAX, EBX
 000001DD  70 05		        JO      _notDigitOrTooLarge                     ; Invalid if overflow.

 000001DF  89 45 F8		        MOV     numInt, EAX

 000001E2  EB 11		        JMP     _continueRead
 000001E4			    _notDigitOrTooLarge:
 000001E4  C6 45 FF 00		        MOV     valid, 0                                ; Valid is false.
 000001E8  8B 55 18		        MOV     EDX, [EBP+24]
 000001EB  E8 00000000 E	        CALL    WriteString
 000001F0  E9 FFFFFF39		        JMP     _validateDigits
 000001F5			    _continueRead:
 000001F5  AC			        LODSB
 000001F6  E2 C7		        LOOP    _readDigit

				; -------------------------
				; Store number.
				; -------------------------
 000001F8  8B 7D 08		    MOV     EDI, [EBP+8]
 000001FB  8B 45 F8		    MOV     EAX, numInt
 000001FE  89 07		    MOV     [EDI], EAX

				; Increment line number.
 00000200  8B 5D 24		    MOV     EBX, [EBP+36]
 00000203  FE 03		    INC     BYTE PTR [EBX]

 00000205  5E		   *	    pop    esi
 00000206  5F		   *	    pop    edi
 00000207  5A		   *	    pop    edx
 00000208  59		   *	    pop    ecx
 00000209  5B		   *	    pop    ebx
 0000020A  58		   *	    pop    eax
 0000020B  C9		   *	    leave  
 0000020C  C2 0020		    RET     32
 0000020F			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Convert a numeric SDWORD value to a string of ASCII digits and displays it to
				;   the user.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;   [EBP+8]     = input, numeric SDWORD value
				;
				; Returns: none
				; ---------------------------------------------------------------------------------
 0000020F			WriteVal PROC USES EAX EBX ECX EDX EDI ESI
				    LOCAL signed:BYTE, digits[MAX_DIGITS]:BYTE, strNum[MAX_DIGITS]:BYTE
				    
 0000020F  55		   *	    push   ebp
 00000210  8B EC	   *	    mov    ebp, esp
 00000212  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 00000215  50		   *	    push   eax
 00000216  53		   *	    push   ebx
 00000217  51		   *	    push   ecx
 00000218  52		   *	    push   edx
 00000219  57		   *	    push   edi
 0000021A  56		   *	    push   esi
 0000021B  C6 45 FF 00		    MOV     signed, 0
 0000021F  8D 7D F3		    LEA     EDI, digits
 00000222  B9 00000000		    MOV     ECX, 0                                      ; Counter for string length
 00000227  FC			    CLD

				; -------------------------
				; Check sign.
				; -------------------------
 00000228  8B 45 08		    MOV     EAX, [EBP+8]
 0000022B  83 F8 00		    CMP     EAX, 0
 0000022E  7D 06		    JGE     _storeDigits
 00000230  C6 45 FF 01		    MOV     signed, 1                                   ; Number is signed.
 00000234  F7 D8		    NEG     EAX                                         ; Use the absolute value of the number.

				; -------------------------
				; Store digits in reverse order
				; -------------------------
 00000236			_storeDigits:
 00000236  BA 00000000		    MOV     EDX, 0
 0000023B  BB 0000000A		    MOV     EBX, 10
 00000240  F7 F3		    DIV     EBX

 00000242  8B D8		    MOV     EBX, EAX                                    ; Store current quotient

 00000244  8A C2		    MOV     AL, DL
 00000246  04 30		    ADD     AL, 48                                      ; Add 48 to remainder to get ASCII character value.
 00000248  AA			    STOSB
 00000249  41			    INC     ECX
 0000024A  8B C3		    MOV     EAX, EBX                                    ; Restore quotient
 0000024C  83 F8 00		    CMP     EAX, 0
 0000024F  75 E5		    JNE     _storeDigits

				; Append sign if number is signed.
 00000251  80 7D FF 01		    CMP     signed, 1
 00000255  75 04		    JNE     _terminateDigits
 00000257  B0 2D		    MOV     AL, '-'
 00000259  AA			    STOSB
 0000025A  41			    INC     ECX

				; Null terminate the string.
 0000025B			_terminateDigits:
 0000025B  BB 00000000		    MOV     EBX, 0
 00000260  89 1F		    MOV     [EDI], EBX 

				; -------------------------
				; Reverse stored digits
				; -------------------------
 00000262  8B F7		    MOV     ESI, EDI                                    ; EDI currently points to end of digits which is now our source.
 00000264  4E			    DEC     ESI
 00000265  8D 7D E7		    LEA     EDI, strNum

 00000268			_reverseDigits:
 00000268  FD			    STD
 00000269  AC			    LODSB                                               ; Move backwards through digit and load result in AL
 0000026A  FC			    CLD
 0000026B  AA			    STOSB                                               ; Move forwards through strNum and store the result from AL
 0000026C  E2 FA		    LOOP _reverseDigits

				; Null terminate the string.
 0000026E  BB 00000000		    MOV     EBX, 0
 00000273  89 1F		    MOV     [EDI], EBX 

				; Display string.
 00000275  8D 5D E7		    LEA     EBX, strNum
				    mDisplayString EBX
 00000278  52		     1	    PUSH    EDX
 00000279  8B D3	     1	    MOV     EDX, EBX
 0000027B  E8 00000000 E     1	    CALL    WriteString
 00000280  5A		     1	    POP     EDX

 00000281  5E		   *	    pop    esi
 00000282  5F		   *	    pop    edi
 00000283  5A		   *	    pop    edx
 00000284  59		   *	    pop    ecx
 00000285  5B		   *	    pop    ebx
 00000286  58		   *	    pop    eax
 00000287  C9		   *	    leave  
 00000288  C2 0004		    RET     4
 0000028B			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/04/21 11:20:52
)Program Template     (Proj6_fonbergi.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002F6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000F2 _TEXT	Length= 0000011D Public STDCALL
  valid  . . . . . . . . . . . .	Byte	 bp - 00000001
  numInt . . . . . . . . . . . .	DWord	 bp - 00000008
  sign . . . . . . . . . . . . .	DWord	 bp - 0000000C
  _validateDigits  . . . . . . .	L Near	 0000012E _TEXT	
  _endTryAgain . . . . . . . . .	L Near	 0000016E _TEXT	
  _notEmpty  . . . . . . . . . .	L Near	 0000018C _TEXT	
  _setNegative . . . . . . . . .	L Near	 0000019C _TEXT	
  _checkLength . . . . . . . . .	L Near	 000001A3 _TEXT	
  _loadNext  . . . . . . . . . .	L Near	 000001BD _TEXT	
  _aggregateNum  . . . . . . . .	L Near	 000001BF _TEXT	
  _readDigit . . . . . . . . . .	L Near	 000001BF _TEXT	
  _notDigitOrTooLarge  . . . . .	L Near	 000001E4 _TEXT	
  _continueRead  . . . . . . . .	L Near	 000001F5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000020F _TEXT	Length= 0000007C Public STDCALL
  signed . . . . . . . . . . . .	Byte	 bp - 00000001
  digits . . . . . . . . . . . .	Byte	 bp - 0000000D
  strNum . . . . . . . . . . . .	Byte	 bp - 00000019
  _storeDigits . . . . . . . . .	L Near	 00000236 _TEXT	
  _terminateDigits . . . . . . .	L Near	 0000025B _TEXT	
  _reverseDigits . . . . . . . .	L Near	 00000268 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F2 Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 00000025 _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 00000087 _TEXT	
  _alreadyFloored  . . . . . . .	L Near	 000000C7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_DIGITS . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgNums  . . . . . . . . . . . .	Byte	 000002C8 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000000A5 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000002A7 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
emptyMsg . . . . . . . . . . . .	Byte	 00000034 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000052 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
firstAttempt . . . . . . . . . .	Byte	 00000000 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000002E1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 000000AD _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000177 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNo . . . . . . . . . . . . .	Byte	 000002F5 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numsEntered  . . . . . . . . . .	Byte	 00000281 _DATA	
rawNumString . . . . . . . . . .	Byte	 00000099 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
secondAttempt  . . . . . . . . .	Byte	 00000020 _DATA	
sumNums  . . . . . . . . . . . .	Byte	 000002AA _DATA	
testArr  . . . . . . . . . . . .	DWord	 00000259 _DATA	
validNum . . . . . . . . . . . .	DWord	 000000A9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
